"""added disposition document template

Revision ID: 3d09ba117ccc
Revises: 46f03ff4dc70
Create Date: 2023-06-15 19:26:19.486244

"""
import uuid
from alembic import op
from core import Base
from sqlalchemy import text

import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '3d09ba117ccc'
down_revision = '46f03ff4dc70'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    base_s3_url = 'http://192.168.0.169:8083'
    disposition_template_id = uuid.uuid4()
    op.bulk_insert(
        Base.metadata.tables['hr_document_templates'],
        [{
            "name": "Приказ о выводе в распоряжение",
            "nameKZ": "Кәдеге жарату туралы бұйрық",
            "path": f"{base_s3_url}/static/кандидаты1.html",
            "pathKZ": f"{base_s3_url}/static/кандидаты1.html",
            "subject_type": 'EMPLOYEE',
            'description': "",
            'maintainer_id': None,
            'is_visible': False,
            "properties": {},
            'actions': {'args': [
            ]},
            'id': disposition_template_id
        }
    ])


    disposition_function_id1 = uuid.uuid4()
    disposition_function_id2 = uuid.uuid4()
    conn = op.get_bind()
    jurisdiction_id = conn.execute(
        text("SELECT id FROM jurisdictions WHERE name = 'Вся служба'")
    ).fetchone()[0]

    initiator_id = conn.execute(
        text("SELECT id FROM document_function_types WHERE name = 'Инициатор'")
    ).fetchone()[0]
    finisher_id = conn.execute(
        text("SELECT id FROM document_function_types WHERE name = 'Утверждающий'")
    ).fetchone()[0]

    op.bulk_insert(
        Base.metadata.tables['staff_functions'],
        [
            {
                'id': disposition_function_id1,
                'hours_per_week': 3,
                'discriminator': 'document_staff_function',
                'name': 'Инициатор приказа о выводе в распоряжение',
                'nameKZ': 'Кәдеге жарату туралы бұйрығының бастаушысы',
                'jurisdiction_id': jurisdiction_id,
                'priority': 1,
                'role_id': initiator_id
            },
            {
                'id': disposition_function_id2,
                'hours_per_week': 3,
                'discriminator': 'document_staff_function',
                'name': 'Утверждающий приказа о выводе в распоряжение',
                'nameKZ': 'Кәдеге жарату туралы бұйрығының бекітушісі',
                'jurisdiction_id': jurisdiction_id,
                'priority': 100,
                'role_id': finisher_id
            },
        ])

    # bond initiator_staff_function with the hr_manager staff_units
    position_id = conn.execute(
        text("SELECT id FROM positions WHERE name = 'HR-менеджер'")
    ).fetchone()[0]
    conn.execute(
        text(f"""
            WITH selected_units AS
            (SELECT id FROM staff_units WHERE position_id = '{position_id}')
            INSERT INTO staff_unit_functions(staff_function_id, staff_unit_id)
            SELECT '{disposition_function_id1}', id from selected_units;
            """)
    )
    # bond finisher_staff_function with the начальник службы staff_unit
    main_staff_unit_id = conn.execute(
        text("SELECT id FROM staff_units WHERE position_id in (SELECT id FROM positions WHERE name = 'Начальник Службы')")
    ).fetchone()[0]
    op.bulk_insert(
        Base.metadata.tables['staff_unit_functions'],
        [
            {
                'staff_function_id': disposition_function_id2,
                'staff_unit_id': main_staff_unit_id
            }
        ])

    disposition_step_id1 = uuid.uuid4()
    disposition_step_id2 = uuid.uuid4()

    op.bulk_insert(
        Base.metadata.tables['hr_document_steps'],
        [
            {
                'hr_document_template_id': disposition_template_id,
                'previous_step_id': None,
                'staff_function_id': disposition_function_id1,
                'id': disposition_step_id1
            },
            {
                'hr_document_template_id': disposition_template_id,
                'previous_step_id': disposition_step_id1,
                'staff_function_id': disposition_function_id2,
                'id': disposition_step_id2
            }
        ])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###
